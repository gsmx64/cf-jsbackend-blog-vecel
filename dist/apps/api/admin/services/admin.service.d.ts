import { DeleteResult, UpdateResult } from 'typeorm';
import { PaginateQuery, Paginated } from 'nestjs-paginate';
import { UsersEntity } from '../../users/entities/users.entity';
import { CategoriesEntity } from '../../categories/entities/categories.entity';
import { PostsEntity } from '../../posts/entities/posts.entity';
import { CommentsEntity } from '../../comments/entities/comments.entity';
import { UserUpdateDTO } from '../../users/dto/user.update.dto';
import { CategoryCreateDTO } from '../../categories/dto/category.create.dto';
import { CategoryUpdateDTO } from '../../categories/dto/category.update.dto';
import { PostUpdateDTO } from '../../posts/dto/post.update.dto';
import { CommentUpdateDTO } from '../../comments/dto/comment.update.dto';
import { UsersService } from '../../users/services/users.service';
import { CategoriesService } from '../../categories/services/categories.service';
import { PostsService } from '../../posts/services/posts.service';
import { CommentsService } from '../../comments/services/comments.service';
import { SearchService } from '../../search/services/search.service';
import { SettingsService } from '../../settings/services/settings.service';
import { SettingsUpdateDTO } from '../../settings/dto/settings.update.dto';
import { SettingsEntity } from '../../settings/entities/settings.entity';
export declare class AdminService {
    private readonly userService;
    private readonly categoryService;
    private readonly postService;
    private readonly commentService;
    private readonly searchService;
    private readonly settingsService;
    constructor(userService: UsersService, categoryService: CategoriesService, postService: PostsService, commentService: CommentsService, searchService: SearchService, settingsService: SettingsService);
    updateUser(body: UserUpdateDTO, id: string, request: any): Promise<UpdateResult | undefined>;
    deleteUser(id: string): Promise<DeleteResult | undefined>;
    findOneUser(id: string): Promise<UsersEntity>;
    findOwnProfile(request: any): Promise<any>;
    findAllUsers(query: PaginateQuery): Promise<Paginated<UsersEntity>>;
    createCategory(body: CategoryCreateDTO): Promise<CategoriesEntity>;
    updateCategory(body: CategoryUpdateDTO, id: string): Promise<UpdateResult | undefined>;
    deleteCategory(id: string): Promise<DeleteResult | undefined>;
    findOneCategory(id: string): Promise<CategoriesEntity>;
    findAllCategories(query: PaginateQuery): Promise<Paginated<CategoriesEntity>>;
    updatePost(body: PostUpdateDTO, id: string): Promise<UpdateResult | undefined>;
    deletePost(id: string): Promise<DeleteResult | undefined>;
    findOnePost(id: string): Promise<PostsEntity>;
    findPostsByUser(id: string, query: PaginateQuery): Promise<Paginated<PostsEntity>>;
    findAllPosts(query: PaginateQuery): Promise<Paginated<PostsEntity>>;
    updateComment(body: CommentUpdateDTO, id: string): Promise<UpdateResult | undefined>;
    deleteComment(id: string): Promise<DeleteResult | undefined>;
    findOneComment(id: string): Promise<CommentsEntity>;
    findAllComments(query: PaginateQuery): Promise<Paginated<CommentsEntity>>;
    searchUsers(query: PaginateQuery): Promise<Paginated<UsersEntity>>;
    searchCategories(query: PaginateQuery): Promise<Paginated<CategoriesEntity>>;
    searchPosts(query: PaginateQuery): Promise<Paginated<PostsEntity>>;
    searchComments(query: PaginateQuery): Promise<Paginated<CommentsEntity>>;
    getSettings(): Promise<SettingsEntity>;
    updateSettings(body: SettingsUpdateDTO): Promise<UpdateResult | undefined>;
}
